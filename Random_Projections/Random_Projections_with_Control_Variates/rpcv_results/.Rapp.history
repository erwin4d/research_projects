apply(cbind(x0,const), 2, cumprod)
apply(cbind(x0,const), 1, cumprod)
dim(apply(cbind(x0,const), 2, cumprod))
dim(apply(cbind(x0,const), 1, cumprod))
cbind(x0,const)
tmp  = cbind(x0,const)#
tmp = tmp[1,]
tmp
cumprod(tmp)
tmp2 = apply(cbind(x0,const), 2, cumprod)#
tmp2[1,]
tmp
mat1 = apply(cbind(x0,const), 2, cumprod)[,2:(nday+1)]#
  mat2 = matrix(0, nrow = N, ncol = nday+1)#
  for(j in 2:(nday+1)){#
    mat2[,j] = mat2[,(j-1)] * const[, (j-1)] #
  }
dim(mat1)
dim(mat2)
mat1 - mat2[,2:101]
mat1 - mat2[,1:100]
StockSimulation = function(x0,mu,sigma,nday,N){#
#
  # Initialize #
  x0 = matrix(x0, ncol = 1) # just in case#
	eps = matrix(rnorm(N*nday),nrow = N)#
	const = exp(mu - sigma^2/2 + sigma*eps)#
#
  #mat = matrix(0, nrow = N, ncol = nday)#
  #mat[,1] = x0#
#
  # I wish R had cumprod like matlab for matrices#
  mat = apply(cbind(x0,const), 2, cumprod)[,2:(nday+1)]#
  return(mat)#
}
dim(res1)
plot_first_part<-function(res){#
  dim_res = dim(res)#
  avg_val = colMeans(res)  #
  up_q = (apply(res1, 2, function(x){return(quantile(x, 0.975))}))#
  down_q = (apply(res1, 2, function(x){return(quantile(x, 0.025))}))#
  ybds = c(min(down_q),max(up_q))#
  plot(0, type = "n", main = "Distribution of prices", xlab = "Day / Time", ylab = "Prices", xlim = c(1,dim_res[2]), ylim = ybds)#
#
  lines(1:dim_res[2], avg_val, col = "black")#
  lines(1:dim_res[2], up_q, col = "blue", lty = 2)#
  lines(1:dim_res[2], down_q, col = "blue", lty = 2)#
#
}
plot_first_part<-function(res){#
  dim_res = dim(res)#
  avg_val = colMeans(res)  #
  up_q = (apply(res, 2, function(x){return(quantile(x, 0.975))}))#
  down_q = (apply(res, 2, function(x){return(quantile(x, 0.025))}))#
  ybds = c(min(down_q),max(up_q))#
  plot(0, type = "n", main = "Distribution of prices", xlab = "Day / Time", ylab = "Prices", xlim = c(1,dim_res[2]), ylim = ybds)#
#
  lines(1:dim_res[2], avg_val, col = "black")#
  lines(1:dim_res[2], up_q, col = "blue", lty = 2)#
  lines(1:dim_res[2], down_q, col = "blue", lty = 2)#
#
}
plot_first_part()
plot_first_part(res)
plot_first_part(res1)
plot_first_part(t(res1))
res2 = StockSimulation(x0 = rep(1,100) , mu = 0.001, sigma = 0.05, nday = 1000, N = 100)
plot_first_part(res2)
plot_first_part(t(res2))
dim(res1)
find_per_outside<-function(res){#
  dim_res = dim(res)  #
  pvec = rep(0, dim_res[1])#
  up_q = (apply(res, 2, function(x){return(quantile(x, 0.975))}))#
  down_q = (apply(res, 2, function(x){return(quantile(x, 0.025))}))#
  for(j in 1:dim_res[1]){#
    this_stock = res[j,]#
    len = length(which(res[j,] > up_q)) + length(which(res[j,] < down_q))#
    if(len > 0){#
      pvec[j] = 1#
    }#
  }#
  return(sum(pvec)/dim_res[1])#
}
find_per_outside(res1)
find_per_outside(res2)
find_per_outside(res1)
res_mine = StockSimulation(x0 = rep(1,1000) , mu = 0.001, sigma = 0.05, nday = 100, N = 1000)#
  res_giles = StockSimulation(x0 = rep(1,100) , mu = 0.001, sigma = 0.05, nday = 1000, N = 100)#
#
  par(mfrow = c(1,2))#
  plot_first_part(res_mine)#
  plot_first_part(res_giles)
par(mfrow = c(1,2))#
  plot_first_part(res_mine)#
  plot_first_part(t(res_giles))
find_per_outside(res_mine)
res_giles = t(res_giles) ## according to model slns
find_per_outside(res_giles)
StockSimulation = function(x0,mu,sigma,nday,N){#
#
  # Initialize #
  x0 = matrix(x0, ncol = 1) # just in case#
	eps = matrix(rnorm(N*nday),nrow = N)#
	const = exp(mu - sigma^2/2 + sigma*eps)#
#
  #mat = matrix(0, nrow = N, ncol = nday)#
  #mat[,1] = x0#
#
  # I wish R had cumprod like matlab for matrices#
  mat = apply(cbind(x0,const), 2, cumprod)[,2:(nday+1)]#
  return(mat)#
}#
# Question: is ndays x0...xn-1  or x0 to xn?#
#
# i) Use this to simulate 1000 stock prices over 100 days with mu = 0.001, #
# sigma = 0.05 starting at $1/gallon.  Produce a plot of the distribution of#
# prices over the 100 days.  The plot should have time on the X-axis and consist#
# of three lines:#
##
#  - the average value of the price on each day#
#  - the 2.5% quantile of the price value on each day#
#  - the 97.5% quantile of the price on each day #
##
# Upload this graph to CMS as StockPrice1.png. #
#
res_mine = StockSimulation(x0 = rep(1,1000) , mu = 0.001, sigma = 0.05, nday = 100, N = 1000)#
#res_giles = StockSimulation(x0 = rep(1,100) , mu = 0.001, sigma = 0.05, nday = 1000, N = 100)#
StockSimulation_giles = function(x0,mu,sigma,nday,N){#
#
  X = matrix(0,nday,N)#
  X[1,] = x0#
  for(i in 2:nday){#
    X[i,] = X[i-1,]*exp( mu - sigma^2/2 + sigma*rnorm(N) )#
  }#
#
  return(X)#
#
}#
#
res_giles = StockSimulation(1,mu = 0.001,sigma = 0.05,100,1000)
res_giles = StockSimulation_giles(1,mu = 0.001,sigma = 0.05,100,1000)
plot_first_part<-function(res){#
  dim_res = dim(res)#
  avg_val = colMeans(res)  #
  up_q = (apply(res, 2, function(x){return(quantile(x, 0.975))}))#
  down_q = (apply(res, 2, function(x){return(quantile(x, 0.025))}))#
  ybds = c(min(down_q),max(up_q))#
  plot(0, type = "n", main = "Distribution of prices", xlab = "Day / Time", ylab = "Prices", xlim = c(1,dim_res[2]), ylim = ybds)#
#
  lines(1:dim_res[2], avg_val, col = "black")#
  lines(1:dim_res[2], up_q, col = "blue", lty = 2)#
  lines(1:dim_res[2], down_q, col = "blue", lty = 2)#
#
}#
#
par(mfrow = c(2,2))#
plot_first_part(res_mine)#
plot_first_part(t(res_mine))#
plot_first_part(res_giles)#
plot_first_part(t(res_giles))
xvec = seq(-10,10, by = 0.01)
yvec = abs(xvec) - xvec^2/2
plot(xvec,yvec, type = "l'")
plot(xvec,yvec, type = "l")
plot(xvec, exp(yvec), type = "l")
max(yvec)
StockSimulation_giles = function(x0,mu,sigma,nday,N){#
#
  X = matrix(0,nday,N)#
  X[1,] = x0#
  for(i in 2:nday){#
    X[i,] = X[i-1,]*exp( mu - sigma^2/2 + sigma*rnorm(N) )#
  }#
#
  return(X)#
#
}#
#
res_giles = StockSimulation_giles(1,mu = 0.001,sigma = 0.05,100,1000)
plot_first_part(res_giles)
plot_first_part(t(res_giles))
StockSimulation = function(x0,mu,sigma,nday,N){#
#
	X = matrix(0,nday,N)#
	X[1,] = x0#
	for(i in 2:nday){#
		X[i,] = X[i-1,]*exp( mu - sigma^2/2 + sigma*rnorm(N) )#
	}#
#
	return(X)#
#
}#
# i) Use this to simulate 1000 stock prices over 100 days with mu = 0.001, #
# sigma = 0.05 starting at $1/gallon.  Produce a plot of the distribution of#
# prices over the 100 days.  The plot should have time on the X-axis and consist#
# of three lines:#
##
#  - the average value of the price on each day#
#  - the 2.5% quantile of the price value on each day#
#  - the 97.5% quantile of the price on each day #
##
# Upload this graph to CMS as StockPrice1.png. #
mu = 0.001#
sigma = 0.05#
X = StockSimulation(1,mu,sigma,100,1000)
dim(X)
Xmean = apply(X,1,mean)
Xmean
X = StockSimulation(1,mu,sigma,100,1000)
dim(X)
Xmean = apply(X,1,mean)
Xmean
StockSimulation = function(x0,mu,sigma,nday,N){#
#
  # Initialize #
  x0 = matrix(x0, ncol = 1) # just in case#
	eps = matrix(rnorm(N*nday),nrow = N)#
	const = exp(mu - sigma^2/2 + sigma*eps)#
#
  #mat = matrix(0, nrow = N, ncol = nday)#
  #mat[,1] = x0#
#
  # I wish R had cumprod like matlab for matrices#
  mat = apply(cbind(x0,const), 2, cumprod)[,2:(nday+1)]#
  return(mat)#
}
res_mine = StockSimulation(x0 = rep(1,1000) , mu = 0.001, sigma = 0.05, nday = 100, N = 1000)
dim(res_mine)
StockSimulation = function(x0,mu,sigma,nday,N){#
#
  # Initialize #
  x0 = matrix(x0, ncol = 1) # just in case#
	eps = matrix(rnorm(N*nday),nrow = N)#
	const = exp(mu - sigma^2/2 + sigma*eps)#
#
  #mat = matrix(0, nrow = N, ncol = nday)#
  #mat[,1] = x0#
#
  # I wish R had cumprod like matlab for matrices#
  mat = apply(cbind(x0,const), 1, cumprod)[,2:(nday+1)]#
  return(t(mat))#
}
res_mine = StockSimulation(x0 = rep(1,1000) , mu = 0.001, sigma = 0.05, nday = 100, N = 1000)
dim(res_mine)
apply(cbind(x0,const), 1, cumprod)
dim(apply(cbind(x0,const), 1, cumprod))
StockSimulation = function(x0,mu,sigma,nday,N){#
#
  # Initialize #
  x0 = matrix(x0, ncol = 1) # just in case#
	eps = matrix(rnorm(N*nday),nrow = N)#
	const = exp(mu - sigma^2/2 + sigma*eps)#
#
  #mat = matrix(0, nrow = N, ncol = nday)#
  #mat[,1] = x0#
#
  # I wish R had cumprod like matlab for matrices#
  mat = apply(cbind(x0,const), 1, cumprod)[2:(nday+1),]#
  return(t(mat))#
}
res_mine = StockSimulation(x0 = rep(1,1000) , mu = 0.001, sigma = 0.05, nday = 100, N = 1000)
dim(res_mine)
plot_first_part(res_mine)
StockSimulation_giles = function(x0,mu,sigma,nday,N){#
#
  X = matrix(0,nday,N)#
  X[1,] = x0#
  for(i in 2:nday){#
    X[i,] = X[i-1,]*exp( mu - sigma^2/2 + sigma*rnorm(N) )#
  }#
#
  return(X)#
#
}#
#
res_giles = StockSimulation_giles(1,mu = 0.001,sigma = 0.05,100,1000)
dim(res_giles)
?seq
rejection_sampler = function(sample,alpha){#
	u = runif(1)#
	if(u < dnorm(sample)/(k*CauchyPDF(sample, alpha))) #
		return(sample) #
		else#
			return(NULL)#
}
iCauchyCDF = function(u,alpha){#
	return(alpha*tan(pi*(u - 0.5)))#
}#
#
CauchyPDF = function(x, alpha){#
	return(alpha/(pi*(alpha^2 + x^2)))#
}#
#
cauchy.samples = iCauchyCDF(runif(1000, 0, 1), .1)#
cauchy.density = CauchyPDF(seq(-2,2,.001), .1)#
cauchy.x = seq(-2,2,.001)
Exp.g.vanilla = mean(plogis(iCauchyCDF(runif(1000,0,1),2)))
Exp.g.antithetic = mean(plogis(c(iCauchyCDF(runif(1000,0,1),2),iCauchyCDF(1-runif(1000,0,1),2))))
Exp.g.vanilla
Exp.g.antithetic
var.reduction = (var(plogis(iCauchyCDF(runif(100,0,1),2))) - var(plogis(c(iCauchyCDF(runif(50,0,1),2),iCauchyCDF(1-runif(50,0,1),2))))) /var(plogis(c(iCauchyCDF(runif(50,0,1),2),iCauchyCDF(1-runif(50,0,1),2))))
var.reduction
var(plogis(iCauchyCDF(runif(100,0,1),2)))
ScoreMatrix = seq(-170,170,len=21){#
	X = bivar.rnorm(10000,0,1)#
	BRv = DartBoard(20*X[,1],20*X[,2])#
	hatIvERROR = mean(BRv)#
	Ivar = var(BRv)#
	sigma = 20#
	alphaM = matrix(0,21,21)#
	scoreM = matric(0,21,21)#
	for(i in 1:21){#
		for(j in 1:21){#
			BRc = DartBoard(sigma*X[,1]+ScoreMatrix[i], sigma*X[,1]+ScoreMatrix[j])#
			alphaM[i,j] = cov(BRc,BRv)/Ivar#
			scoreM[i,j] = mean(BRc) - alphaM[i,j]*hatIvERROR#
			}#
}#
}
bugger_this()
?get
get(a = 2)
get("a=2")
a
eval(5+5)
eval("5+5")
parse("5+5")
eval(parse(text="5+5"))
rubric_ob <- setClass("rubric_ob", slots=list(name="character", with_pre_data = "numeric"))
rubric_ob
rubric_ob(s)
rubric_ob(name = "s", with_pre_data = "s")
rubric_ob <- setClass("rubric_ob", slots=list(name = "character", with_pre_data = "character"))
rubric_ob(name = "s", with_pre_data = "s")
setClass("student",#
  slots=list(name="character", age="numeric", GPA="numeric")#
)
rubric_ob <- setClass("rubric_ob", slots=list(name = "character", with_pre_data = "character"))
rm(list = ls())
rubric_ob
setClass("rubric_ob", slots=list(name = "character", with_pre_data = "character"))
ls()
rubric_ob
setClass("speed_rubric_ob", slots=list(to_compare_with = "character", inputs = "list", ratio = "numeric"), contains="rubric_ob")
create_speed_rubric = setClass("speed_rubric_ob", slots=list(to_compare_with = "character", inputs = "list", ratio = "numeric"), contains="rubric_ob")
create_speed_rubric
create_speed_rubric(to_compare_with = "hi", inputs = list(1), ratio = 5)
create_speed_rubric(name = "test", with_pre_data = "test", to_compare_with = "hi", inputs = list(1), ratio = 5)
f = function(x){return(x)}
mode(f)
setClass("rubric_ob", slots=list(name = "character", with_pre_data = "character"))#
#
create_speed_rubric = setClass("speed_rubric_ob", slots=list(to_compare_with = "character", inputs = "list", ratio = "numeric", score = "numeric", msg = "character"), contains="rubric_ob")#
#
create_own_function_rubric = setClass("function_rubric_ob", slots=list(seed = "numeric", own_function = "function", inputs = "list"), contains="rubric_ob") ## Note, this assumes your output is a list of score, msg
setClass("rubric_ob", slots=list(name = "character", with_pre_data = "character"))#
# Score is given if speed is BELOW ratio#
# Score can be negative#
create_speed_rubric = setClass("speed_rubric_ob", slots=list(to_compare_with = "character", inputs = "list", ratio = "numeric", score = "numeric", msg = "character"), contains="rubric_ob")#
#
create_own_function_rubric = setClass("function_rubric_ob", slots=list(seed = "numeric", own_function = "function", inputs = "list"), contains="rubric_ob") ## Note, this assumes your output is a list of score, msg#
#
# Score is given if it MATCHES model answer soln up to some rel_tol#
create_automatic_rubric = setClass("automatic_rubric_ob", slots=list(rel_tol = "numeric", seed = "numeric", to_check = "character", inputs = "list", msg = "character", score = "numeric"), contains="rubric_ob")#
#
# Semi manual is interesting#
# to_check: var or function taking in inputs as in inputs#
# ALSO to check a function of the student#
#
create_semi_manual_rubric = setClass("semi_manual_rubric_ob", slots=list(seed = "numeric", to_check = "character", inputs = "list", fun_to_check = "character", standard_rubric_option = "list", adding_rubric_option = "list", penalty_rubric_option = "list") contains="rubric_ob")
create_semi_manual_rubric = setClass("semi_manual_rubric_ob", slots=list(seed = "numeric", to_check = "character", inputs = "list", fun_to_check = "character", standard_rubric_option = "list", adding_rubric_option = "list", penalty_rubric_option = "list") contains="rubric_ob")
create_semi_manual_rubric = setClass("semi_manual_rubric_ob", slots=list(seed = "numeric", to_check = "character", inputs = "list", fun_to_check = "character", standard_rubric_option = "list", adding_rubric_option = "list", penalty_rubric_option = "list"), contains="rubric_ob")
setClass("rubric_ob", slots=list(name = "character", with_pre_data = "character", question_num = "character"))#
# Score is given if speed is BELOW ratio#
# Score can be negative#
create_speed_rubric = setClass("speed_rubric_ob", slots=list(to_compare_with = "character", inputs = "list", ratio = "numeric", score = "numeric", msg = "character"), contains="rubric_ob")#
#
create_own_function_rubric = setClass("function_rubric_ob", slots=list(seed = "numeric", own_function = "function", inputs = "list"), contains="rubric_ob") ## Note, this assumes your output is a list of score, msg#
#
# Score is given if it MATCHES model answer soln up to some rel_tol#
create_automatic_rubric = setClass("automatic_rubric_ob", slots=list(rel_tol = "numeric", seed = "numeric", to_check = "character", inputs = "list", msg = "character", score = "numeric"), contains="rubric_ob")#
#
# Semi manual is interesting#
# to_check: var or function taking in inputs as in inputs#
# ALSO to check a function of the student#
#
create_semi_manual_rubric = setClass("semi_manual_rubric_ob", slots=list(seed = "numeric", to_check = "character", inputs = "list", fun_to_check = "character", standard_rubric_option = "list", adding_rubric_option = "list", penalty_rubric_option = "list"), contains="rubric_ob")
?qnorm
qnorm(0.5,mean = 5,sd = 5)
qnorm(0.5,mean = 5,sd = 1)
q1_speed = create_speed_rubric(name = "rubric for q1", question_num = "Q1", to_compare_with = "some_function", inputs = list(a =1, b =2), ratio = 1.2, score = 2, msg = "You are as fast as us! Well done!")
q1_speed
q1_acc = create_automatic_rubric("acc rubric for q1", question_num = "Q1", rel_tol = 0, to_check = "some_variable", msg = "Your variable matches ours", score = 2)
create_automatic_rubric = setClass("automatic_rubric_ob", slots=list(rel_tol = "numeric", seed = "numeric", to_check = "character", inputs = "list", msg = "character", score = "numeric"), contains="rubric_ob")
q1_acc = create_automatic_rubric(name = "acc rubric for q1", question_num = "Q1", rel_tol = 0, to_check = "some_variable", msg = "Your variable matches ours", score = 2)
q1_sanity_2 = create_automatic_rubric(name = "sanity check2 for q1", question_num = "Q1", rel_tol = 0, to_check = "some_function", inputs = list(a = -1), msg = "You forgot a parenthesis here", score = -2)
q2_own = create_own_function_rubric(name = "own fn rubric for Q2", question_num = "Q2", seed = 10, own_function = function(x){return(list(score = 2, msg = "yay"))}, inputs = list(hisfunction = "some_function"))
q2_own
q1_sanity_2 = create_automatic_rubric(name = "sanity check2 for q1", question_num = "Q1", rel_tol = 0, with_pre_data = "my_own_data.R", to_check = "some_function", inputs = list(a = -1), msg = "You probably used fixed data!", score = -2)
create_semi_manual_rubric = setClass("semi_manual_rubric_ob", slots=list(seed = "numeric", fun_to_check = "character", inputs = "list", standard_rubric_option = "list", adding_rubric_option = "list", penalty_rubric_option = "list"), contains="rubric_ob")
create_semi_manual_rubric = setClass("semi_manual_rubric_ob", slots=list(seed = "numeric", fun_to_check = "character", inputs = "list", standard_rubric_option = "list", adding_rubric_option = "list", penalty_rubric_option = "list", min_points = "numeric", max_points = "numeric"), contains="rubric_ob")
q1_speed = create_speed_rubric(name = "rubric for q1", question_num = "Q1", to_compare_with = "some_function", inputs = list(a =1, b =2), ratio = 1.2, score = 2, msg = "You are as fast as us! Well done!") #
#
q1_acc = create_automatic_rubric(name = "acc rubric for q1", question_num = "Q1", rel_tol = 0, to_check = "some_variable", msg = "Your variable matches ours", score = 2)#
#
q1_sanity = create_automatic_rubric(name = "sanity check for q1", question_num = "Q1", rel_tol = 0, to_check = "some_function", inputs = list(a = 1), msg = "You should not have evaluated this!", score = -2)#
#
q1_sanity_2 = create_automatic_rubric(name = "sanity check2 for q1", question_num = "Q1", rel_tol = 0, with_pre_data = "my_own_data.R", to_check = "some_function", inputs = list(a = -1), msg = "You probably used fixed data!", score = -2)#
#
q2_acc = create_automatic_rubric(name = "acc rubric for q2", question_num = "Q2", seed = 5, rel_tol = 0.01, to_check = "some_other_function", inputs = list(random = 1), msg = "Your output is close to ours", score = 2)#
#
q2_own = create_own_function_rubric(name = "own fn rubric for Q2", question_num = "Q2", seed = 10, own_function = function(x){return(list(score = 2, msg = "yay"))}, inputs = list(hisfunction = "some_function"))#
#
q3_other = create_semi_manual_rubric(name = "semi-manual grading rubric q3", question_num = "Q3", fun_to_check = "this_function", inputs = list(a = 1), standard_rubric_option = list(list(msg = "Bad!", score = 0), list(msg = "Good!", score = 2)))#
#
# May go over#
q3b_other = create_semi_manual_rubric(name = "semi-manual grading rubric q3b", question_num = "Q3B", fun_to_check = "this_function", inputs = list(a = 1), adding_rubric_option = list(list(msg = "You have good option 1!", score = 2), list(msg = "You have good option 2!", score = 2)), max_points = 4)#
#
# Maybe the code is so bad, you allow min points to go below 0#
q3c_other = create_semi_manual_rubric(name = "semi-manual grading rubric q3c", question_num = "Q3C", fun_to_check = "this_function", inputs = list(a = 1), penalty_rubric_option = list(list(msg = "You have bad option 1!", score = -2), list(msg = "You have bad option 2!", score = -2)), min_points = 0, max_points = 4)
q3c_other = create_semi_manual_rubric(name = "semi-manual grading rubric q3c", question_num = "Q3C", fun_to_check = "this_function", inputs = list(a = 1), penalty_rubric_option = list(default = list(list(msg = "Everyone forgets to divide by zero!", score = -2)), list(msg = "You have bad option 2!", score = -2)), min_points = 0, max_points = 4)
setClass("rubric_ob", slots=list(name = "character", with_pre_data = "character", question_num = "character"))#
setClass("speed_rubric_ob", slots=list(to_compare_with = "character", inputs = "list", ratio = "numeric", score = "numeric", msg = "character"), contains="rubric_ob")
create_speed_rubric<-function(name, question_num, to_compare_with, ratio, score, msg, inputs = NULL, with_pre_data = NULL){#
  if(ratio < 0){#
  	stop("Speed ratio cannot be 0!")#
  }#
  return(new("speed_rubric_ob", name = name, question_num = question_num, to_compare_with = to_compare_with, ratio = ratio, score = score, msg = msg))#
}
q1_speed = create_speed_rubric(name = "rubric for q1", question_num = "Q1", to_compare_with = "some_function", inputs = list(a =1, b =2), ratio = 1.2, score = 2, msg = "You are as fast as us! Well done!")
q1_speed
str(q1_speedcreate_speed_rubric<-function(name, question_num, to_compare_with, ratio, score, msg, inputs = NULL, with_pre_data = NULL){#
  if(ratio < 0){#
  	stop("Speed ratio cannot be 0!")#
  }#
  return(new("speed_rubric_ob", name = name, question_num = question_num, to_compare_with = to_compare_with, ratio = ratio, score = score, msg = msg, inputs = inputs, with_pre_data = with_pre_data))#
}#
)
create_speed_rubric<-function(name, question_num, to_compare_with, ratio, score, msg, inputs = NULL, with_pre_data = NULL){#
  if(ratio < 0){#
  	stop("Speed ratio cannot be 0!")#
  }#
  return(new("speed_rubric_ob", name = name, question_num = question_num, to_compare_with = to_compare_with, ratio = ratio, score = score, msg = msg, inputs = inputs, with_pre_data = with_pre_data))#
}
q1_speed = create_speed_rubric(name = "rubric for q1", question_num = "Q1", to_compare_with = "some_function", inputs = list(a =1, b =2), ratio = 1.2, score = 2, msg = "You are as fast as us! Well done!")
create_speed_rubric<-function(name, question_num, to_compare_with, ratio, score, msg, inputs = NA, with_pre_data = NA){#
  if(ratio < 0){#
  	stop("Speed ratio cannot be 0!")#
  }#
  return(new("speed_rubric_ob", name = name, question_num = question_num, to_compare_with = to_compare_with, ratio = ratio, score = score, msg = msg, inputs = inputs, with_pre_data = with_pre_data))#
}
q1_speed = create_speed_rubric(name = "rubric for q1", question_num = "Q1", to_compare_with = "some_function", inputs = list(a =1, b =2), ratio = 1.2, score = 2, msg = "You are as fast as us! Well done!")
NA_character
NA_character_
create_speed_rubric<-function(name, question_num, to_compare_with, ratio, score, msg, inputs = NA, with_pre_data = NA_character_){#
  if(ratio < 0){#
  	stop("Speed ratio cannot be 0!")#
  }#
  return(new("speed_rubric_ob", name = name, question_num = question_num, to_compare_with = to_compare_with, ratio = ratio, score = score, msg = msg, inputs = inputs, with_pre_data = with_pre_data))#
}
q1_speed = create_speed_rubric(name = "rubric for q1", question_num = "Q1", to_compare_with = "some_function", inputs = list(a =1, b =2), ratio = 1.2, score = 2, msg = "You are as fast as us! Well done!")
q1_speed
str(q1_speed)
q1_speed
q1_speed@name
?print
?cat
setMethod(f = "show", signature = "speed_rubric_ob",#
	definition = function(rubric_ob) {#
    cat("Name:", rubric_ob@name, "\n")#
    cat("This rubric is part of", rubric_ob@question_num, "\n\n")#
    if (is.na(rubric_ob@inputs)){#
      cat("This rubric checks the speed of the function", rubric_ob@to_compare_with, "against the model solution.\n")#
    } else {#
      cat("This rubric checks the speed of the function", rubric_ob@to_compare_with, "with inputs\n")#
      print(rubric_ob@inputs, quote = FALSE)#
      cat("against the model solution.\n")	#
    }#
    cat("A score of", rubric_ob@score, "is awarded if the speed ratio is below", rubric_ob@ratio, "\n")#
    cat("The message given for this rubric is:", rubric_ob@msg)   #
   } #
)
setMethod(f = "show", signature = "speed_rubric_ob",#
	definition = function(object) {#
    cat("Name:", object@name, "\n")#
    cat("This rubric is part of", object@question_num, "\n\n")#
    if (is.na(object@inputs)){#
      cat("This rubric checks the speed of the function", object@to_compare_with, "against the model solution.\n")#
    } else {#
      cat("This rubric checks the speed of the function", object@to_compare_with, "with inputs\n")#
      print(object@inputs, quote = FALSE)#
      cat("against the model solution.\n")	#
    }#
    cat("A score of", object@score, "is awarded if the speed ratio is below", object@ratio, "\n")#
    cat("The message given for this rubric is:", object@msg)   #
   } #
)
ls()
q1_speed
object@inputs
setMethod(f = "show", signature = "speed_rubric_ob",#
	definition = function(object) {#
    cat("Name:", object@name, "\n")#
    cat("This rubric is part of", object@question_num, "\n\n")#
    #quickly check if na#
    obj_inputs = TRUE#
    if(length(object@inputs) == 1){#
    	if (is.na(obj_inputs)){#
    		obj_inputs = FALSE#
    	}#
    }#
#
    if (!obj_inputs) {#
      cat("This rubric checks the speed of the function", object@to_compare_with, "against the model solution.\n")#
    } else {#
      cat("This rubric checks the speed of the function", object@to_compare_with, "with inputs\n")#
      print(object@inputs, quote = FALSE)#
      cat("against the model solution.\n")	#
    }#
    cat("A score of", object@score, "is awarded if the speed ratio is below", object@ratio, "\n")#
    cat("The message given for this rubric is:", object@msg)   #
   } #
)
q1_speed
setMethod(f = "show", signature = "speed_rubric_ob",#
	definition = function(object) {#
    cat("Name:", object@name, "\n\n")#
    cat("This rubric is part of", object@question_num, "\n")#
    #quickly check if na#
    obj_inputs = TRUE#
    if(length(object@inputs) == 1){#
    	if (is.na(obj_inputs)){#
    		obj_inputs = FALSE#
    	}#
    }#
#
    if (!obj_inputs) {#
      cat("This rubric checks the speed of the function", object@to_compare_with, "against the model solution.\n")#
    } else {#
      cat("This rubric checks the speed of the function", object@to_compare_with, "with inputs\n")#
      print(object@inputs, quote = FALSE)#
      cat("against the model solution.\n")	#
    }#
    cat("A score of", object@score, "is awarded if the speed ratio is below", object@ratio, "\n")#
    cat("The message given for this rubric is:", object@msg)   #
   } #
)
q1_speed
setMethod(f = "show", signature = "speed_rubric_ob",#
	definition = function(object) {#
    cat("Name:", object@name, "\n\n")#
    cat("This rubric is part of ", object@question_num, ".\n", sep = " ")#
    #quickly check if na#
    obj_inputs = TRUE#
    if(length(object@inputs) == 1){#
    	if (is.na(obj_inputs)){#
    		obj_inputs = FALSE#
    	}#
    }#
#
    if (!obj_inputs) {#
      cat("This rubric checks the speed of the function", object@to_compare_with, "against the model solution.\n")#
    } else {#
      cat("This rubric checks the speed of the function", object@to_compare_with, "with inputs\n")#
      print(object@inputs, quote = FALSE)#
      cat("against the model solution.\n")	#
    }#
    cat("A score of ", object@score, " is awarded if the speed ratio is below", object@ratio, ".\n", sep = " ")#
    cat("The message given for this rubric is:", object@msg)   #
   } #
)
q1_speed
setMethod(f = "show", signature = "speed_rubric_ob",#
	definition = function(object) {#
    cat("Name:", object@name, "\n\n")#
    cat("This rubric is part of ", object@question_num, ".\n", sep = "")#
    #quickly check if na#
    obj_inputs = TRUE#
    if(length(object@inputs) == 1){#
    	if (is.na(obj_inputs)){#
    		obj_inputs = FALSE#
    	}#
    }#
#
    if (!obj_inputs) {#
      cat("This rubric checks the speed of the function", object@to_compare_with, "against the model solution.\n")#
    } else {#
      cat("This rubric checks the speed of the function", object@to_compare_with, "with inputs\n")#
      print(object@inputs, quote = FALSE)#
      cat("against the model solution.\n")	#
    }#
    cat("A score of ", object@score, " is awarded if the speed ratio is below", object@ratio, ".\n", sep = "")#
    cat("The message given for this rubric is:", object@msg)   #
   } #
)
q1_speed
setMethod(f = "show", signature = "speed_rubric_ob",#
	definition = function(object) {#
    cat("Name:", object@name, "\n\n")#
    cat("This rubric is part of ", object@question_num, ".\n", sep = "")#
    #quickly check if na#
    obj_inputs = TRUE#
    if(length(object@inputs) == 1){#
    	if (is.na(obj_inputs)){#
    		obj_inputs = FALSE#
    	}#
    }#
#
    if (!obj_inputs) {#
      cat("This rubric checks the speed of the function", object@to_compare_with, "against the model solution.\n")#
    } else {#
      cat("This rubric checks the speed of the function", object@to_compare_with, "with inputs\n")#
      print(object@inputs, quote = FALSE)#
      cat("against the model solution.\n")	#
    }#
    cat("A score of ", object@score, " is awarded if the speed ratio is below ", object@ratio, ".\n", sep = "")#
    cat("The message given for this rubric is:", object@msg)   #
   } #
)
q1_speed
setClass("rubric_ob", slots=list(name = "character", with_pre_data = "character", question_num = "character"))#
setClass("speed_rubric_ob", slots=list(to_compare_with = "character", inputs = "list", ratio = "numeric", score = "numeric", msg_pass = "character", msg_fail = "character"), contains="rubric_ob")
create_speed_rubric<-function(name, question_num, to_compare_with, ratio, score, msg_pass, msg_fail, inputs = NA, with_pre_data = NA_character_){#
  if(ratio < 0){#
  	stop("Speed ratio cannot be 0!")#
  }#
#
  return(new("speed_rubric_ob", name = name, question_num = question_num, to_compare_with = to_compare_with, ratio = ratio, score = score, msg_pass = msg_pass, msg_fail = msg_fail,  inputs = inputs, with_pre_data = with_pre_data))#
}#
setMethod(f = "show", signature = "speed_rubric_ob",#
	definition = function(object) {#
    cat("Name:", object@name, "\n\n")#
    cat("This rubric is part of ", object@question_num, ".\n", sep = "")#
    #quickly check if na#
    obj_inputs = TRUE#
    if(length(object@inputs) == 1){#
    	if (is.na(obj_inputs)){#
    		obj_inputs = FALSE#
    	}#
    }#
#
    if (!obj_inputs) {#
      cat("This rubric checks the speed of the function", object@to_compare_with, "against the model solution.\n")#
    } else {#
      cat("This rubric checks the speed of the function", object@to_compare_with, "with inputs\n")#
      print(object@inputs, quote = FALSE)#
      cat("against the model solution.\n")	#
    }#
    cat("A score of ", object@score, " is awarded if the speed ratio is below ", object@ratio, ".\n", sep = "")#
    cat("Passing this rubric gives:", object@msg_pass, "\n")   #
    cat("Failing this rubric gives:", object@msg_fail, "\n")   #
   } #
)#
#
## Example#
#
q1_speed = create_speed_rubric(name = "rubric for q1", question_num = "Q1", to_compare_with = "some_function", inputs = list(a =1, b =2), ratio = 1.2, score = 2, msg_pass = "You are as fast as us! Well done!", msg_fail = "Unfortunately, your function is too slow.")
q1_speed
is.na("fh")
setMethod(f = "show", signature = "speed_rubric_ob",#
	definition = function(object) {#
    cat("Name:", object@name, "\n\n")#
    cat("This rubric is part of ", object@question_num, ".\n", sep = "")#
    if(!is.na(object@with_pre_data)){#
      cat("This rubric is used after sourcing the file:", object@with_pre_data)#
    }#
    #quickly check if na#
    obj_inputs = TRUE#
    if(length(object@inputs) == 1){#
    	if (is.na(obj_inputs)){#
    		obj_inputs = FALSE#
    	}#
    }#
#
    if (!obj_inputs) {#
      cat("This rubric checks the speed of the function", object@to_compare_with, "against the model solution.\n")#
    } else {#
      cat("This rubric checks the speed of the function", object@to_compare_with, "with inputs\n")#
      print(object@inputs, quote = FALSE)#
      cat("against the model solution.\n")	#
    }#
    cat("A score of ", object@score, " is awarded if the speed ratio is below ", object@ratio, ".\n", sep = "")#
    cat("Passing this rubric gives:", object@msg_pass, "\n")   #
    cat("Failing this rubric gives:", object@msg_fail, "\n")   #
   } #
)#
#
## Example#
#
q1_speed = create_speed_rubric(name = "rubric for q1", question_num = "Q1", to_compare_with = "some_function", inputs = list(a =1, b =2), ratio = 1.2, score = 2, msg_pass = "You are as fast as us! Well done!", msg_fail = "Unfortunately, your function is too slow.")
q1_speed
?rowMeans
rowMeans(c(1,2,3,4,5), 2)
rowMeans(c(1,2,3,4,5), 1)
rowMeans(matrix(0,nrow = 10,ncol = 10), dims = 1)
rowMeans(matrix(0,nrow = 10,ncol = 10), dims = 2)
rowMeans(matrix(0,nrow = 10,ncol = 10), dims = 3)
rowMeans(matrix(0,nrow = 10,ncol = 10), 1:5)
rowMeans(matrix(0,nrow = 10,ncol = 10), 1:10)
rowMeans(matrix(0,nrow = 10,ncol = 10), 1:11)
10/230
10/230 * 40
20/230 * 40
setClass("rubric_ob", slots=list(name = "character", with_pre_data = "character", question_num = "character"))
setClass("speed_rubric_ob", slots=list(to_compare_with = "character", inputs = "list", ratio = "numeric", score = "numeric", msg_pass = "character", msg_fail = "character"), contains="rubric_ob")
create_speed_rubric<-function(name, to_compare_with, ratio, score, msg_pass, msg_fail, question_num = NA_character_, inputs = NA, with_pre_data = NA_character_){#
  if(ratio < 0){#
    stop("Speed ratio cannot be 0!")#
  }#
#
  return(new("speed_rubric_ob", name = name, question_num = question_num, to_compare_with = to_compare_with, ratio = ratio, score = score, msg_pass = msg_pass, msg_fail = msg_fail,  inputs = inputs, with_pre_data = with_pre_data))#
}
create_speed_rubric<-function(name, to_compare_with, ratio, score, msg_pass = "You passed the speed test", msg_fail = "You failed the speed test", question_num = NA_character_, inputs = NA, with_pre_data = NA_character_){#
  if(ratio < 0){#
    stop("Speed ratio cannot be 0!")#
  }#
#
  return(new("speed_rubric_ob", name = name, question_num = question_num, to_compare_with = to_compare_with, ratio = ratio, score = score, msg_pass = msg_pass, msg_fail = msg_fail,  inputs = inputs, with_pre_data = with_pre_data))#
}
create_speed_rubric<-function(name, question_num, to_compare_with, ratio, score, msg_pass = "You passed the speed test", msg_fail = "You failed the speed test", inputs = NA, with_pre_data = NA_character_){#
  if(ratio < 0){#
    stop("Speed ratio cannot be 0!")#
  }#
#
  return(new("speed_rubric_ob", name = name, question_num = question_num, to_compare_with = to_compare_with, ratio = ratio, score = score, msg_pass = msg_pass, msg_fail = msg_fail,  inputs = inputs, with_pre_data = with_pre_data))#
}
q1_speed = create_speed_rubric(name = "rubric for q1", question_num = "Q1", to_compare_with = "some_function", inputs = list(a =1, b =2), ratio = 1.2, score = 2, msg_pass = "You are as fast as us! Well done!", msg_fail = "Unfortunately, your function is too slow.")
q1_speed
setMethod(f = "show", signature = "speed_rubric_ob",#
  definition = function(object) {#
    cat("Name:", object@name, "\n\n")#
    cat("This rubric is part of ", object@question_num, ".\n", sep = "")#
    if(!is.na(object@with_pre_data)){#
      cat("This rubric is used after sourcing the file:", object@with_pre_data)#
    }#
    #quickly check if na#
    obj_inputs = TRUE#
    if(length(object@inputs) == 1){#
      if (is.na(obj_inputs)){#
        obj_inputs = FALSE#
      }#
    }#
#
    if (!obj_inputs) {#
      cat("This rubric checks the speed of the function", object@to_compare_with, "against the model solution.\n")#
    } else {#
      cat("This rubric checks the speed of the function", object@to_compare_with, "with inputs\n")#
      print(object@inputs, quote = FALSE)#
      cat("against the model solution.\n")  #
    }#
    cat("A score of ", object@score, " is awarded if the speed ratio is below ", object@ratio, ".\n", sep = "")#
    cat("Passing this rubric gives:", object@msg_pass, "\n")   #
    cat("Failing this rubric gives:", object@msg_fail, "\n")   #
   } #
)
q1_speed
q1_speed = create_speed_rubric(name = "rubric for q1", question_num = "Q1", to_compare_with = "speedy_gonzales_function", inputs = list(a =1, b =2), ratio = 1.2, score = 2, msg_pass = "You are as fast as us! Well done!", msg_fail = "Unfortunately, your function is too slow.")
q1_speed
setClass("rubric_ob", slots=list(name = "character", with_pre_data = "character", question_num = "character"))#
## Rubric subclass (for speed)#
## Additional slots are:#
## fun_name: function name (the student writes) - we test speed here#
## inputs: a list of inputs for the function#
## ratio: How fast (student speed / own speed) to get credit#
## score: Score to give#
## msg_pass: Pass text #
## msg_fail: fail text#
setClass("speed_rubric_ob", slots=list(fun_name = "character", inputs = "list", ratio = "numeric", score = "numeric", msg_pass = "character", msg_fail = "character"), contains="rubric_ob")#
## Create the rubric#
## Essential to have#
##   + name#
##   + question_num#
##   + function to compare with#
##   + ratio #
##   + score#
#
## The rest are optional#
#
create_speed_rubric<-function(name, question_num, fun_name, ratio, score, msg_pass = "You passed the speed test", msg_fail = "You failed the speed test", inputs = NA, with_pre_data = NA_character_){#
  if(ratio < 0){#
    stop("Speed ratio cannot be 0!")#
  }#
#
  return(new("speed_rubric_ob", name = name, question_num = question_num, fun_name = fun_name, ratio = ratio, score = score, msg_pass = msg_pass, msg_fail = msg_fail,  inputs = inputs, with_pre_data = with_pre_data))#
}#
#
## Display the speed rubric#
#
setMethod(f = "show", signature = "speed_rubric_ob",#
  definition = function(object) {#
    cat("Name:", object@name, "\n\n")#
    cat("This rubric is part of ", object@question_num, ".\n", sep = "")#
    if(!is.na(object@with_pre_data)){#
      cat("This rubric is used after sourcing the file:", object@with_pre_data)#
    }#
    #quickly check if na#
    obj_inputs = TRUE#
    if(length(object@inputs) == 1){#
      if (is.na(obj_inputs)){#
        obj_inputs = FALSE#
      }#
    }#
#
    if (!obj_inputs) {#
      cat("This rubric checks the speed of the function", object@fun_name, "against the model solution.\n")#
    } else {#
      cat("This rubric checks the speed of the function", object@fun_name, "with inputs\n")#
      print(object@inputs, quote = FALSE)#
      cat("against the model solution.\n")  #
    }#
    cat("A score of ", object@score, " is awarded if the speed ratio is below ", object@ratio, ".\n", sep = "")#
    cat("Passing this rubric gives:", object@msg_pass, "\n")   #
    cat("Failing this rubric gives:", object@msg_fail, "\n")   #
   } #
)#
#
## Example#
#
q1_speed = create_speed_rubric(name = "rubric for q1", question_num = "Q1", fun_name = "speedy_gonzales_function", inputs = list(a =1, b =2), ratio = 1.2, score = 2, msg_pass = "You are as fast as us! Well done!", msg_fail = "Unfortunately, your function is too slow.") #
#
## Next class: automatic rubric!
q1_speed
setClass("automatic_rubric_ob", slots=list(fun_name = "character", inputs = "list", score = "numeric", msg_pass = "character", msg_fail = "character", pass_function = "function", rel_tol = "numeric", seed = "numeric"), contains="rubric_ob")
list(1)
length(list(1))
length(list(1,2))
setClass("automatic_rubric_ob", slots=list(fun_name = "character", inputs = "list", score = "numeric", msg_pass = "character", msg_fail = "character", pass_function = "function", rel_tol = "numeric", seed = "numeric", common_mistakes = "list"), contains="rubric_ob")
setClass("automatic_rubric_ob", slots=list(fun_name = "character", inputs = "list", score = "numeric", msg_pass = "character", msg_fail = "character", pass_function = "function", rel_tol = "numeric", seed = "numeric", common_mistakes = "list"), contains="rubric_ob")#
create_automatic_rubric<-function(name, question_num, fun_name, score, msg_pass = "You passed the test.", msg_fail = "You failed the test.", inputs = NA, with_pre_data = NA_character_, pass_function = NA, rel_tol = 0, seed = 1.618, common_mistakes = NA){#
#
  if (rel_tol < 0){#
    stop("Relative tolerance cannot be below 0!")#
  }#
  return(new("automatic_rubric_ob", name = name, question_num = question_num, fun_name = fun_name, score = score, msg_pass = msg_pass, msg_fail = msg_fail, inputs = inputs, with_pre_data = with_pre_data, pass_function = pass_function, rel_tol = rel_tol, seed = seed, common_mistakes = common_mistakes))#
}
a1 = create_automatic_rubric(name = "zz", question_num = "ss", fun_name = "zz", score = 5)
a1 = create_automatic_rubric(name = "zz", question_num = "ss", fun_name = "zz", score = 5, inputs = list(1))
a1 = create_automatic_rubric(name = "zz", question_num = "ss", fun_name = "zz", score = 5, inputs = list(1), pass_function = mean)
a1 = create_automatic_rubric(name = "zz", question_num = "ss", fun_name = "zz", score = 5, inputs = list(1), pass_function = mean, common_mistakes = list(1))
a1
create_automatic_rubric<-function(name, question_num, fun_name, score, msg_pass = "You passed the test.", msg_fail = "You failed the test.", inputs = NA, with_pre_data = NA_character_, pass_function = function(x){return(x)}, rel_tol = 0, seed = 1.618, common_mistakes = NA){#
#
  if (rel_tol < 0){#
    stop("Relative tolerance cannot be below 0!")#
  }#
#
  return(new("automatic_rubric_ob", name = name, question_num = question_num, fun_name = fun_name, score = score, msg_pass = msg_pass, msg_fail = msg_fail, inputs = inputs, with_pre_data = with_pre_data, pass_function = pass_function, rel_tol = rel_tol, seed = seed, common_mistakes = common_mistakes))#
}#
#
a1 = create_automatic_rubric(name = "zz", question_num = "ss", fun_name = "zz", score = 5)
create_automatic_rubric<-function(name, question_num, fun_name, score, msg_pass = "You passed the test.", msg_fail = "You failed the test.", inputs = NULL, with_pre_data = NA_character_, pass_function = function(x){return(x)}, rel_tol = 0, seed = 1.618, common_mistakes = NULL){#
#
  if (rel_tol < 0){#
    stop("Relative tolerance cannot be below 0!")#
  }#
#
  return(new("automatic_rubric_ob", name = name, question_num = question_num, fun_name = fun_name, score = score, msg_pass = msg_pass, msg_fail = msg_fail, inputs = inputs, with_pre_data = with_pre_data, pass_function = pass_function, rel_tol = rel_tol, seed = seed, common_mistakes = common_mistakes))#
}#
#
a1 = create_automatic_rubric(name = "zz", question_num = "ss", fun_name = "zz", score = 5)
create_automatic_rubric<-function(name, question_num, fun_name, score, msg_pass = "You passed the test.", msg_fail = "You failed the test.", inputs = NA, with_pre_data = NA_character_, pass_function = function(x){return(x)}, rel_tol = 0, seed = 1.618, common_mistakes = NA){#
#
  if (rel_tol < 0){#
    stop("Relative tolerance cannot be below 0!")#
  }#
#
  return(new("automatic_rubric_ob", name = name, question_num = question_num, fun_name = fun_name, score = score, msg_pass = msg_pass, msg_fail = msg_fail,with_pre_data = with_pre_data, pass_function = pass_function, rel_tol = rel_tol, seed = seed))#
}
create_automatic_rubric<-function(name, question_num, fun_name, score, msg_pass = "You passed the test.", msg_fail = "You failed the test.", inputs = NULL, with_pre_data = NA_character_, pass_function = function(x){return(x)}, rel_tol = 0, seed = 1.618, common_mistakes = NULL){#
#
  if (rel_tol < 0){#
    stop("Relative tolerance cannot be below 0!")#
  }#
#
  return(new("automatic_rubric_ob", name = name, question_num = question_num, fun_name = fun_name, score = score, msg_pass = msg_pass, msg_fail = msg_fail, inputs = inputs, with_pre_data = with_pre_data, pass_function = pass_function, rel_tol = rel_tol, seed = seed, common_mistakes = common_mistakes))#
}#
#
a1 = create_automatic_rubric(name = "zz", question_num = "ss", fun_name = "zz", score = 5)
a1
NA_character
NA_character_
NA_list_
NA_function_
list(NA)
create_speed_rubric<-function(name, question_num, fun_name, score, ratio, msg_pass = "You passed the speed test.", msg_fail = "You failed the speed test.", inputs = list(NA), with_pre_data = NA_character_){#
  if(ratio < 0){#
    stop("Speed ratio cannot be 0!")#
  }#
#
  return(new("speed_rubric_ob", name = name, question_num = question_num, fun_name = fun_name, ratio = ratio, score = score, msg_pass = msg_pass, msg_fail = msg_fail,  inputs = inputs, with_pre_data = with_pre_data))#
}
setClass("automatic_rubric_ob", slots=list(fun_name = "character", inputs = "list", score = "numeric", msg_pass = "character", msg_fail = "character", pass_function = "function", rel_tol = "numeric", seed = "numeric", common_mistakes = "list"), contains="rubric_ob")#
create_automatic_rubric<-function(name, question_num, fun_name, score, msg_pass = "You passed the test.", msg_fail = "You failed the test.", inputs = list(NA), with_pre_data = NA_character_, pass_function = function(x){return(x)}, rel_tol = 0, seed = 1.618, common_mistakes = list(NA)){#
#
  if (rel_tol < 0){#
    stop("Relative tolerance cannot be below 0!")#
  }#
#
  return(new("automatic_rubric_ob", name = name, question_num = question_num, fun_name = fun_name, score = score, msg_pass = msg_pass, msg_fail = msg_fail, inputs = inputs, with_pre_data = with_pre_data, pass_function = pass_function, rel_tol = rel_tol, seed = seed, common_mistakes = common_mistakes))#
}#
#
a1 = create_automatic_rubric(name = "zz", question_num = "ss", fun_name = "zz", score = 5)
a1
identity(x)
identity(1)
identity(2)
create_automatic_rubric<-function(name, question_num, fun_name, score, msg_pass = "You passed the test.", msg_fail = "You failed the test.", inputs = list(NA), with_pre_data = NA_character_, pass_function = identity, rel_tol = 0, seed = 1.618, common_mistakes = list(NA)){#
#
  if (rel_tol < 0){#
    stop("Relative tolerance cannot be below 0!")#
  }#
#
  return(new("automatic_rubric_ob", name = name, question_num = question_num, fun_name = fun_name, score = score, msg_pass = msg_pass, msg_fail = msg_fail, inputs = inputs, with_pre_data = with_pre_data, pass_function = pass_function, rel_tol = rel_tol, seed = seed, common_mistakes = common_mistakes))#
}#
#
a1 = create_automatic_rubric(name = "zz", question_num = "ss", fun_name = "zz", score = 5)
a1
a1@pass_function
name(a1@pass_function)
names(a1@pass_function)
deparse(a1@pass_funciton)
deparse(a1@pass_function)
deparse(quote(a1@pass_function))
is.na(list(NA))
identical
identical(identity, a1@pass_function)
identical
print(identical)
setMethod(f = "show", signature = "automatic_rubric_ob",#
  definition = function(object) {#
    cat("Name:", object@name, "\n\n")#
    cat("This rubric is part of ", object@question_num, ".\n", sep = "")#
    if(!is.na(object@with_pre_data)){#
      cat("This rubric is used after sourcing the file:", object@with_pre_data)#
    }#
    #quickly check if na#
    obj_inputs = TRUE#
    if(length(object@inputs) == 1){#
      if (is.na(object@inputs)){#
        obj_inputs = FALSE#
      }#
    }#
#
    if (!obj_inputs) {#
      cat("This rubric checks the output of the function ", object@fun_name, " against the model solution with a relative tolerance of ", object@rel_tol, " and seed of ", object@seed, ".\n", sep = "")#
    } else {#
      cat("This rubric checks the output of the function ", object@fun_name, " with inputs\n")#
      print(object@inputs, quote = FALSE)#
      cat("against the model solution with a relative tolerance of ", object@rel_tol, " and seed of ", object@seed, ".\n", sep = "") #
    }#
#
    #pass_function#
    if(!identical(identity, object@pass_function)){#
      cat("The output of the function will be passed through\n")#
      print(object@pass_function)#
      cat("and compared.\n")#
    }#
#
    #quickly check if na#
    c_mis = TRUE#
    if(length(object@common_mistakes) == 1){#
      if (is.na(object@common_mistakes)){#
        c_mis = FALSE#
      }#
    }#
#
    if (c_mis){#
      cat("Several common mistakes with their pitfalls are shown below.\n")#
      print(object@common_mistakes)#
    }#
    cat("A score of ", object@score, " is awarded if the answer is within a relative tolerance of", object@rel_tol, "from the model answers.\n")#
    cat("Passing this rubric gives:", object@msg_pass, "\n")   #
    cat("Failing this rubric gives:", object@msg_fail, "\n")   #
   } #
)
a1
q1_acc = create_automatic_rubric(name = "acc rubric for q1", question_num = "Q1", rel_tol = 0, to_check = "some_variable", msg = "Your variable matches ours", score = 2)
q1_acc = create_automatic_rubric(name = "acc rubric for q1", question_num = "Q1", rel_tol = 0, fun_name = "some_variable", msg = "Your variable matches ours", score = 2)
q1_acc = create_automatic_rubric(name = "acc rubric for q1", question_num = "Q1", rel_tol = 0, fun_name = "some_variable", msg_pass = "Your variable matches ours", score = 2)
q1_acc
65536/1000
getwd()
read_and_load_data<-function(data_name, sim_type, iter_num = 1000, is_norm, type_of_mat, pos_in_perc){#
  this_WD = "/Users/keegankang/Google Drive/Research SUTD/research_projects/Random_Projections/Random_Projections_with_Control_Variates/rpcv_results"#
  types_vec = c("bias", "mse", "var")#
  if(sim_type == "ED"){#
    task_vec = c("ord_ED", "ord_ED_using_bin_exp", "empirical_CV_ED", "theory_CV_via_naive_est_ED", "theory_CV_via_li_est_ED")#
    #legend_vec = c("Ordinary ED estimates", "Substituting IP estimate for ED", "Empirical CV for ED", "Theoretical CV for ED using computed IP", "Theoretical CV for ED using Li's IP" )#
#
  } else if (sim_type == "IP") {#
    task_vec = c("ord_IP", "li_IP", "empirical_CV_IP", "theory_CV_via_naive_est_IP", "theory_CV_via_li_est_IP")#
    #legend_vec = c("Ordinary IP estimates", "Li's IP estimates", "Empirical CV for IP", "Theoretical CV for IP using computed IP", "Theoretical CV for IP using Li's IP" )#
  }#
  # Example#
#
  bias_mat = matrix(0, nrow = 5, ncol = 50)#
  mse_mat = matrix(0, nrow = 5, ncol = 50)#
  var_mat = matrix(0, nrow = 5, ncol = 50)#
  for(zz in 1:5){#
    cv_file = paste(this_WD, "/", data_name, "_", iter_num, "_iter/", data_name, "_", types_vec[1], "_", iter_num, "_iter_", type_of_mat, "_", is_norm, "_for_", task_vec[zz], ".csv", sep = "")#
    cv_res = read.table(cv_file, header = FALSE, sep = ",")#
    bias_mat[zz,] = c(unlist(cv_res[pos_in_perc,]))#
#
    cv_file = paste(this_WD, "/", data_name, "_", iter_num, "_iter/", data_name, "_", types_vec[2], "_", iter_num, "_iter_", type_of_mat, "_", is_norm, "_for_", task_vec[zz], ".csv", sep = "")#
    cv_res = read.table(cv_file, header = FALSE, sep = ",")#
    mse_mat[zz,] = c(unlist(cv_res[pos_in_perc,]))#
#
    cv_file = paste(this_WD, "/", data_name, "_", iter_num, "_iter/", data_name, "_", types_vec[3], "_", iter_num, "_iter_", type_of_mat, "_", is_norm, "_for_", task_vec[zz], ".csv", sep = "")#
    cv_res = read.table(cv_file, header = FALSE, sep = ",")#
    var_mat[zz,] = c(unlist(cv_res[pos_in_perc,]))#
#
  }#
#
  if(sim_type == "ED"){#
    bias_mat = bias_mat[c(1,3,4,5),]#
    mse_mat = mse_mat[c(1,3,4,5),]#
    var_mat = var_mat[c(1,3,4,5),]#
    legend_vec = c("Ordinary ED estimates", "Empirical CV for ED", "Theoretical CV for ED using computed IP", "Theoretical CV for ED using Li's IP" )#
    frac_legend_vec = c("Baseline of ED with empirical CV", "Baseline of ED with theoretical CV (estimated IP)", "Baseline of ED with theoretical CV (Li's IP)")#
  } else if (sim_type == "IP") {#
    bias_mat = bias_mat[1:4,]#
    mse_mat = mse_mat[1:4,]#
    var_mat = var_mat[1:4,]#
#
    legend_vec = c("Ordinary IP estimates", "Li's IP estimates", "Empirical CV for IP", "Theoretical CV for IP using computed IP" )#
    frac_legend_vec = c("Baseline of IP with empirical CV", "Baseline of ED with theoretical CV (estimated IP)")#
  }#
#
  return(list(bias_mat = bias_mat, mse_mat = mse_mat, var_mat = var_mat, data_name = data_name, sim_type = sim_type, is_norm = is_norm, type_of_mat = type_of_mat, pos_in_perc = pos_in_perc, legend_vec = legend_vec, frac_legend_vec = frac_legend_vec))#
#
}#
## Now: Plot bias, var, MSE at once#
#
show_bias_plot<-function(some_list, kvec, col_vec, lty_vec, size_main, size_axis, size_labels, size_legend){#
  bias_mat = some_list$bias_mat#
  ybounds = c(0, max(bias_mat[,10:50])) # Cut off the first part#
  xbounds = c(0, 100)#
  ptile = some_list$pos_in_perc*10#
  main_str = paste("Relative bias of ", ptile, "th percentile pair with ",some_list$type_of_mat, "rix", sep = "") # something like this so#
  plot(0, type = "n", xlab = "Columns of projection matrix", ylab = "Relative Bias", ylim = ybounds, xlim = xbounds, main = main_str, cex.main = size_main, cex.axis = size_axis, cex.lab = size_labels)#
#
  for(j in 1:4){#
    lines(kvec, bias_mat[j,], col = col_vec[j], lty = lty_vec[j])#
  }#
  legend_vec = some_list$legend_vec#
  legend("topright", legend = legend_vec, lty = lty_vec, col = col_vec, cex = size_legend, bg = "white")#
  legend("topleft", legend = paste(some_list$data_name, "dataset"), bg = "white", cex = size_legend)#
#
}#
#
show_var_plot<-function(some_list, kvec, col_vec, lty_vec, size_main, size_axis, size_labels, size_legend){#
  var_mat = some_list$var_mat#
  ybounds = c(0, max(var_mat[,10:50])) # Cut off the first part#
  xbounds = c(0, 100)#
  ptile = some_list$pos_in_perc*10#
  main_str = paste("Relative variance of ", ptile, "th percentile pair with ",some_list$type_of_mat, "rix", sep = "") # something like this so#
  plot(0, type = "n", xlab = "Columns of projection matrix", ylab = "Relative variance", ylim = ybounds, xlim = xbounds, main = main_str, cex.main = size_main, cex.axis = size_axis, cex.lab = size_labels)#
#
  for(j in 1:4){#
    lines(kvec, var_mat[j,], col = col_vec[j], lty = lty_vec[j])#
  }#
  legend_vec = some_list$legend_vec#
  legend("topright", legend = legend_vec, lty = 1, col = col_vec, cex = size_legend, bg = "white")#
  legend("topleft", legend = paste(some_list$data_name, "dataset"), bg = "white", cex = size_legend)#
#
}#
show_mse_plot<-function(some_list, kvec, col_vec, lty_vec, size_main, size_axis, size_labels, size_legend){#
  mse_mat = some_list$mse_mat#
  ybounds = c(0, max(mse_mat[,10:50])) # Cut off the first part#
  xbounds = c(0, 100)#
  ptile = some_list$pos_in_perc*10#
  main_str = paste("Relative MSE of ", ptile, "th percentile pair with ",some_list$type_of_mat, "rix", sep = "") # something like this so#
  plot(0, type = "n", xlab = "Columns of projection matrix", ylab = "Relative MSE", ylim = ybounds, xlim = xbounds, main = main_str, cex.main = size_main, cex.axis = size_axis, cex.lab = size_labels)#
#
  for(j in 1:4){#
    lines(kvec, mse_mat[j,], col = col_vec[j], lty = lty_vec[j])#
  }#
  legend_vec = some_list$legend_vec#
  legend("topright", legend = legend_vec, lty = 1, col = col_vec, cex = size_legend, bg = "white")#
  legend("topleft", legend = paste(some_list$data_name, "dataset"), bg = "white", cex = size_legend)#
#
}#
#
plot_all_three_para<-function(some_list, size_main = 0.7, size_axis = 0.7, size_labels = 0.7, size_legend = 0.7){#
  par(mfrow = c(1,3))#
  kvec = seq(2,100,2)#
  lty_vec = c(1,1,1,1)#
  col_vec = c("black", "blue", "green", "red", "blue")  #
  show_bias_plot(some_list, kvec = kvec, col_vec = col_vec, lty_vec = lty_vec, size_main = size_main, size_axis = size_axis, size_labels = size_labels, size_legend = size_legend)#
#
  show_var_plot(some_list, kvec = kvec, col_vec = col_vec, lty_vec = lty_vec, size_main = size_main, size_axis = size_axis, size_labels = size_labels, size_legend = size_legend)#
#
  show_mse_plot(some_list, kvec = kvec, col_vec = col_vec, lty_vec = lty_vec, size_main = size_main, size_axis = size_axis, size_labels = size_labels, size_legend = size_legend)#
#
}#
# Check to see if works, yes.#
#
mat_vecs = c("normal_mat", "binary_mat", "SB5_mat", "SB10_mat", "SRHT_mat")
for (pp in 2:10){#
  for(j in 1:length(mat_vecs)){#
    some_list = read_and_load_data(data_name = "colon", sim_type = "ED", is_norm = "normalized", type_of_mat = mat_vecs[j], pos_in_perc = pp)#
#
    plot_all_three_para(some_list, size_main = 0.8, size_axis = 0.8, size_labels = 0.8, size_legend = 0.8)#
    readline("Pause for contemplation")#
#
  }#
}
for (pp in 2:10){#
  for(j in 1:length(mat_vecs)){#
    some_list = read_and_load_data(data_name = "colon", sim_type = "ED", is_norm = "normalized", type_of_mat = mat_vecs[j], pos_in_perc = pp)#
#
    plot_all_three_para(some_list, size_main = 0.8, size_axis = 0.8, size_labels = 0.8, size_legend = 0.8)#
    readline("Pause for contemplation")#
#
  }#
}
for (pp in 2:10){#
  for(j in 1:length(mat_vecs)){#
    some_list = read_and_load_data(data_name = "arcene", sim_type = "IP", is_norm = "normalized", type_of_mat = mat_vecs[j], pos_in_perc = pp)#
#
    plot_all_three_para(some_list, size_main = 0.8, size_axis = 0.8, size_labels = 0.8, size_legend = 0.8)#
    readline("Pause for contemplation")#
#
  }#
}
plot_var_fraction<-function(some_list_ED, some_list_IP, size_main = 0.8, size_axis = 0.8, size_labels = 0.8, size_legend = 0.8){#
  par(mfrow = c(1,2))#
  kvec = seq(2,100,2)#
  lty_vec = c(1,1,1,1)#
  col_vec = c("black", "blue", "green", "red")  #
#
  # First do ED#
  mse_mat = some_list_ED$mse_mat#
  ybounds = c(0, 1)#
  xbounds = c(0, 100)#
  ptile = some_list_ED$pos_in_perc*10#
  main_str = paste("Variance reduction of ", ptile, "th percentile pair with ",some_list_ED$type_of_mat, "rix", sep = "") # something like this so#
  plot(0, type = "n", xlab = "Columns of projection matrix", ylab = expression(paste("Ratio ", rho)), ylim = ybounds, xlim = xbounds, main = main_str, cex.main = size_main, cex.axis = size_axis, cex.lab = size_labels)#
#
  for(j in 2:4){#
    lines(kvec, mse_mat[j,]/mse_mat[1,], col = col_vec[j], lty = lty_vec[j])#
  }#
  legend_vec = some_list_ED$frac_legend_vec#
  legend("bottomright", legend = legend_vec, lty = 1, col = col_vec[2:4], cex = size_legend, bg = "white")#
  legend("bottomleft", legend = paste(some_list_ED$data_name, "dataset"), bg = "white", cex = size_legend)#
  mse_mat = some_list_IP$mse_mat#
  ybounds = c(0, 1)#
  xbounds = c(0, 100)#
  ptile = some_list_IP$pos_in_perc*10#
  main_str = paste("Variance reduction of ", ptile, "th percentile pair with ",some_list_IP$type_of_mat, "rix", sep = "") # something like this so#
  plot(0, type = "n", xlab = "Columns of projection matrix", ylab = expression(paste("Ratio ", rho)), ylim = ybounds, xlim = xbounds, main = main_str, cex.main = size_main, cex.axis = size_axis, cex.lab = size_labels)#
#
  for(j in 3:4){#
    lines(kvec, mse_mat[j,]/mse_mat[2,], col = col_vec[j], lty = lty_vec[j])#
  }#
  legend_vec = some_list_IP$frac_legend_vec#
  legend("bottomright", legend = legend_vec, lty = 1, col = col_vec[3:4], cex = size_legend, bg = "white")#
  legend("bottomleft", legend = paste(some_list_IP$data_name, "dataset"), bg = "white", cex = size_legend)#
#
}#
mat_vecs = c("normal_mat", "binary_mat", "SB5_mat", "SB10_mat", "SRHT_mat")
for (pp in 2:10){#
  for(j in 1:length(mat_vecs)){#
    some_list_ED = read_and_load_data(data_name = "nips", sim_type = "ED", is_norm = "normalized", type_of_mat = mat_vecs[j], pos_in_perc = pp)#
    some_list_IP = read_and_load_data(data_name = "nips", sim_type = "IP", is_norm = "normalized", type_of_mat = mat_vecs[j], pos_in_perc = pp)#
#
    plot_var_fraction(some_list_ED, some_list_IP, size_main = 0.8, size_axis = 0.8, size_labels = 0.8, size_legend = 0.7)#
    readline("Pause for contemplation")#
#
  }#
}
